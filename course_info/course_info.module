<?php
/**
 * @file
 * A description of what your module does.
 */


/**
 *  Implements hook_menu().
 */
function course_info_menu() {
    $items = array();
    $items['admin/config/services/course_info'] = array(
        'title' => t('OILS Course Information Settings'),
        'description' => 'Configure URL of \'UNM Open Data\' for importing into Drupal.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('course_info_admin_form'),
        'access arguments' => array('administer OILS course info settings'),
        'file' => 'course_info.admin_form.inc',
        'type' => MENU_NORMAL_ITEM,
    );
    $items['admin/config/services/course_info/settings'] = array(
        'title' => t('Settings'),
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 0,
    );

    return $items;
}

/**
 *  Implements hook_permission().
 */
function course_info_permission() {
    return array(
        'administer course info settings' => array(
            'title' => t('Administer OILS course info configuration'),
            'description' => t('Perform administration tasks on OILS course info module.'),
        ),
    );
}

/**
 * Grab unm courses information xml file.
 * Parse, and place OILS relevent info into DB.
 */
function load_course_info_from_web() {

    $destination = 'public://';
    // Grab URL of course data file
    $url_result = db_query('SELECT * FROM courses_info_url');
    $msg = '';
    // There should only be one...
    $reader = new XMLReader();
    foreach ($url_result as $row) {
        $file = system_retrieve_file($row->url, $destination, TRUE);
        if($file) {
            $reader->open($file->uri);
            while($reader->read()){
                if ($reader->name == 'college' && $reader->getAttribute('code') == 'LL') {
                    break;
                }
            }
            $data = new SimpleXMLElement($reader->readOuterXml());
            $data = drupal_json_decode(drupal_json_encode($data));
            dpm($data);
        }
        else {
            $msg = "Unable to retrieve " . $row->url . ", course nodes will not be updated.";
        }



        //Add nid if new page or refresh updated col
        //if (!empty($fields)) {
        //   db_update('program_of_study')
        //        ->fields($fields)
        //        ->condition('id', $row->id)
        //        ->execute();
        //}

    }


}

function pushCoursesDataToDB($data) {

    /*
     * How to check if there are multiples of the object you are inserting:
     * e.x. - if department['@attributes'] doesnt exist, then you probably
     * have something like department[0]['@attributes']
     *
     * Two ideas to check:
     * 1) If children of department are named as ints
     * 2) If @attributes doesnt exist as a direct child.
     */

    // Departments
    /*
    if(!empty($data['department'])){
        db_update('courses_info_departments')
            ->fields($data['department']['@attributes'])
            // update if id of db item with code of $data['department']['@attributes']['code'] exists
            // if not, create new row.
            //->condition('id', )
    }
    */


    // Subjects

    // Courses

    // Sections

    // Instructors

    // Sections-Instructors (normalization table)

    // Meeting Times

    // Sections-Meeting Times (normalization table)


}


function xml2array($xml) {
    $arr = array();

    foreach($xml as $element) {
        $tag = $element->getName();
        $e = get_object_vars($element);
        if (!empty($e)) {
            if($element instanceof SimpleXMLElement) {
                $arr[$tag] = $e;
                $arr[$tag][] = xml2array($element);
            }
            else {
                $arr[$tag] = $e;
            }
        } else {
            $arr[$tag] = trim($element);
        }
    }

    return $arr;

}
