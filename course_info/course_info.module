<?php
/**
 * @file
 * A description of what your module does.
 */


/**
 *  Implements hook_menu().
 */
function course_info_menu() {
    $items = array();
    $items['admin/config/services/course_info'] = array(
        'title' => t('OILS Course Information Settings'),
        'description' => 'Configure URL of \'UNM Open Data\' for importing into Drupal.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('course_info_admin_form'),
        'access arguments' => array('administer OILS course info settings'),
        'file' => 'course_info.admin_form.inc',
        'type' => MENU_NORMAL_ITEM,
    );
    $items['admin/config/services/course_info/settings'] = array(
        'title' => t('Settings'),
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 0,
    );

    return $items;
}

/**
 *  Implements hook_permission().
 */
function course_info_permission() {
    return array(
        'administer course info settings' => array(
            'title' => t('Administer OILS course info configuration'),
            'description' => t('Perform administration tasks on OILS course info module.'),
        ),
    );
}

/**
 * Grab unm courses information xml file.
 * Parse, and place OILS relevent info into DB.
 */
function load_course_info_from_web() {

    $destination = 'public://';
    // Grab URL of course data file
    $url_result = db_query('SELECT * FROM courses_info_url');
    $msg = '';
    // There should only be one...
    $reader = new XMLReader();
    foreach ($url_result as $row) {
        $file = system_retrieve_file($row->url, $destination, TRUE);
        if($file) {
            $reader->open($file->uri);
            while($reader->read()){
                if ($reader->name == 'college' && $reader->getAttribute('code') == 'LL') {
                    break;
                }
            }
            $data = new SimpleXMLElement($reader->readOuterXml());
            $data = drupal_json_decode(drupal_json_encode($data));
            dpm($data);
        }
        else {
            $msg = "Unable to retrieve " . $row->url . ", course nodes will not be updated.";
        }
        buildCoursesContentTypes($data);


    }


}

function buildCoursesContentTypes($data) {

    /*
     * How to check if there are multiples of the object you are inserting:
     * e.x. - if department['@attributes'] doesnt exist, then you probably
     * have something like department[0]['@attributes']
     *
     * Two ideas to check:
     * 1) If children of department are named as ints
     * 2) If @attributes doesnt exist as a direct child.
     */


    /*
    *     global $user;
          // Pull all employee nids into array to check against
          $nid_list_q = db_query('select nid, title from {node} n where n.type = \'employee\'');
          foreach ($nid_list_q as $nline) {
            $nid_list["$nline->title"] = $nline->nid;
          }

          // Check to see if node exists; if so, get it, otherwise create it
          $node_title = "";
          if (isset($input["field_first_name"])) {
            $node_title .= $input["field_first_name"];
          }
          if (isset($input["field_middle_name"])) {
            $node_title .= " " . $input["field_middle_name"];
          }
          if (isset($input["field_last_name"])) {
            $node_title .= " " . $input["field_last_name"];
          }
          if (isset($nid_list[$node_title]) && is_numeric($nid_list[$node_title])) {
            $wrapper = entity_metadata_wrapper('node', $nid_list[$node_title]);
          }
          else {
            $values = array(
              'type' => 'employee',
              'uid' => $user->uid,
              'status' => 1,
              'comment' => 0,
              'promote' => 0,
            );
            $entity = entity_create('node', $values);
            $wrapper = entity_metadata_wrapper('node', $entity);
          }
     */


    /*
     * Start moving through data, our assumed top level is College
     */
    $dept_list_q = db_query('select nid, title from {node} n where n.type = \'Department\'');
    foreach ($dept_list_q as $dept) {
        $dept_list["$dept->title"] = $dept->nid;
    }

    //$data['department']['@attributes'] = singular attributes
    //$data['department']['subject'] = one or more subjects and the rest of the subtree
    //dpm($dept_list);


    // Sloppy test to see if there is more than one department
    if(array_key_exists(0, $data['department'])){
        foreach($data['department'] as $department){
            $department_title = $department['@attributes']['code'];
            if (array_key_exists($department_title, $dept_list)){
                updateCourseInfoNode($department, 'department');
            }
            else {
                createNewCourseInfoNode($department, 'department');
            }
        }
    }
    else {
        $department = $data['department'];
        $department_title = $department['@attributes']['code'];
        if (array_key_exists($department_title, $dept_list)){
            updateCourseInfoNode($department, 'department');
        }
        else {
            createNewCourseInfoNode($department, 'department');
        }
    }

}

function createNewCourseInfoNode($data, $type) {
    global $user;
    switch ($type) {
        case 'department':
            $attributes = $data['@attributes'];
            $subjects = $data['subject'];
            $values = array(
                'type' => 'department',
                'uid' => $user->uid,
                'status' => 1,
                'comment' => 0,
                'promote' => 0,
            );
            $entity = entity_create('node', $values);
            $wrapper = entity_metadata_wrapper('node', $entity);

            // Set all values
            if (isset($attributes["code"]) && !empty($input["code"])) {
                $wrapper->title->value->set($attributes["code"]);
            }
            if (isset($attributes["name"]) && !empty($input["name"])) {
                $wrapper->field_name->set($attributes["name"]);
            }
            // Now we have to set an entity reference for every associated subject.
            foreach ($subjects as $subject) {
                // Create or Update individual Subject node (and create necessary nodes recursively on downwards)
                // Then... create the entity reference for each newly created node as they are finished creating.
                // Maybe I should return an NID ...
            }


            // The End - Save It
            $wrapper->save();
            break;
        case 'subject':
            //code
            break;
        case 'course':
            //code
            break;
        case 'section':
            //code
            break;
        case 'instructor':
            //code
            break;
    }

}
function updateCourseInfoNode($data, $type) {
    switch ($type) {
        case 'department':
            //code
            break;
        case 'subject':
            //code
            break;
        case 'course':
            //code
            break;
        case 'section':
            //code
            break;
        case 'instructor':
            //code
            break;
    }
}
