<?php
/**
 * @file
 * A description of what your module does.
 */


/**
 *  Implements hook_menu().
 */
function course_info_menu() {
    $items = array();
    $items['admin/config/services/course_info'] = array(
        'title' => t('OILS Course Information Settings'),
        'description' => 'Configure URL of \'UNM Open Data\' for importing into Drupal.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('course_info_admin_form'),
        'access arguments' => array('administer OILS course info settings'),
        'file' => 'course_info.admin_form.inc',
        'type' => MENU_NORMAL_ITEM,
    );
    $items['admin/config/services/course_info/settings'] = array(
        'title' => t('Settings'),
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 0,
    );

    return $items;
}

/**
 *  Implements hook_permission().
 */
function course_info_permission() {
    return array(
        'administer course info settings' => array(
            'title' => t('Administer OILS course info configuration'),
            'description' => t('Perform administration tasks on OILS course info module.'),
        ),
    );
}

/**
 * Grab unm courses information xml file.
 * Parse, and place OILS relevent info into DB.
 */
function load_course_info_from_web() {

    $destination = 'public://';
    // Grab URL of course data file
    $url_result = db_query('SELECT * FROM courses_info_url');
    $msg = '';
    // There should only be one...
    $reader = new XMLReader();
    foreach ($url_result as $row) {
        $file = system_retrieve_file($row->url, $destination, TRUE);
        if($file) {
            $reader->open($file->uri);
            while($reader->read()){
                if ($reader->name == 'college' && $reader->getAttribute('code') == 'LL') {
                    break;
                }
            }
            $data = new SimpleXMLElement($reader->readOuterXml());
            $data = drupal_json_decode(drupal_json_encode($data));
            dpm($data);
        }
        else {
            $msg = "Unable to retrieve " . $row->url . ", course nodes will not be updated.";
        }
        buildCoursesContentTypes($data);


        //Add nid if new page or refresh updated col
        //if (!empty($fields)) {
        //   db_update('program_of_study')
        //        ->fields($fields)
        //        ->condition('id', $row->id)
        //        ->execute();
        //}

    }


}

function buildCoursesContentTypes($data) {

    /*
     * How to check if there are multiples of the object you are inserting:
     * e.x. - if department['@attributes'] doesnt exist, then you probably
     * have something like department[0]['@attributes']
     *
     * Two ideas to check:
     * 1) If children of department are named as ints
     * 2) If @attributes doesnt exist as a direct child.
     */


    /*
    *     global $user;
          // Pull all employee nids into array to check against
          $nid_list_q = db_query('select nid, title from {node} n where n.type = \'employee\'');
          foreach ($nid_list_q as $nline) {
            $nid_list["$nline->title"] = $nline->nid;
          }

          // Check to see if node exists; if so, get it, otherwise create it
          $node_title = "";
          if (isset($input["field_first_name"])) {
            $node_title .= $input["field_first_name"];
          }
          if (isset($input["field_middle_name"])) {
            $node_title .= " " . $input["field_middle_name"];
          }
          if (isset($input["field_last_name"])) {
            $node_title .= " " . $input["field_last_name"];
          }
          if (isset($nid_list[$node_title]) && is_numeric($nid_list[$node_title])) {
            $wrapper = entity_metadata_wrapper('node', $nid_list[$node_title]);
          }
          else {
            $values = array(
              'type' => 'employee',
              'uid' => $user->uid,
              'status' => 1,
              'comment' => 0,
              'promote' => 0,
            );
            $entity = entity_create('node', $values);
            $wrapper = entity_metadata_wrapper('node', $entity);
          }
     */


    /*
     * Start moving through data, our assumed top level is College
     */
    $dept_list_q = db_query('select * from {node} n where n.type = \'Department\'');
    foreach ($dept_list_q as $dept) {
        $dept_list["$dept->title"] = $dept->nid;
    }
    //dpm($dept_list);




}

function createNewDepartmentNode($data) {

}
function createNewSubjectNode($data) {

}
function createNewSectionNode($data) {

}
function createNewInstructorNode($data) {

}
function createNewMeetingTimeNode($data) {

}

function xml2array($xml) {
    $arr = array();

    foreach($xml as $element) {
        $tag = $element->getName();
        $e = get_object_vars($element);
        if (!empty($e)) {
            if($element instanceof SimpleXMLElement) {
                $arr[$tag] = $e;
                $arr[$tag][] = xml2array($element);
            }
            else {
                $arr[$tag] = $e;
            }
        } else {
            $arr[$tag] = trim($element);
        }
    }

    return $arr;

}
