<?php
/**
 * @file
 * A description of what your module does.
 */


/**
 *  Implements hook_menu().
 */
function course_info_menu() {
    $items = array();
    $items['admin/config/services/course_info'] = array(
        'title' => t('OILS Course Information Settings'),
        'description' => 'Configure URL of \'UNM Open Data\' for importing into Drupal.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('course_info_admin_form'),
        'access arguments' => array('administer OILS course info settings'),
        'file' => 'course_info.admin_form.inc',
        'type' => MENU_NORMAL_ITEM,
    );
    $items['admin/config/services/course_info/settings'] = array(
        'title' => t('Settings'),
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 0,
    );

    return $items;
}

/**
 *  Implements hook_permission().
 */
function course_info_permission() {
    return array(
        'administer course info settings' => array(
            'title' => t('Administer OILS course info configuration'),
            'description' => t('Perform administration tasks on OILS course info module.'),
        ),
    );
}

/**
 * Grab unm courses information xml file.
 * Parse, and place OILS relevent info into DB.
 *
 * @return void
 */
function load_course_info_from_web() {

    $destination = 'public://';
    // Grab URL of course data file
    $url_result = db_query('SELECT * FROM courses_info_url');
    $msg = '';
    // There should only be one...
    $reader = new XMLReader();
    foreach ($url_result as $row) {
        $file = system_retrieve_file($row->url, $destination, TRUE, FILE_EXISTS_REPLACE);
        if($file) {
            $reader->open($file->uri);
            while($reader->read()){
                if ($reader->name == 'college' && $reader->getAttribute('code') == 'LL') {
                    break;
                }
            }
            $data = new SimpleXMLElement($reader->readOuterXml());
            $data = drupal_json_decode(drupal_json_encode($data));
        }
        else {
            $msg = "Unable to retrieve " . $row->url . ", course nodes will not be updated.";
        }

        /*
         * For the time being, we are starting with the creation
         * of Departments and moving downwards through the tree.
         */
        buildCourseInfoEntities($data['department'], 'department');


    }


}


function testNewEntityPlurality($data){
    if(sizeof($data) > 1){
        if(array_key_exists(0, $data)){
            return TRUE;
        }
        else {
            return FALSE;
        }
    }
    else {
        return FALSE;
    }
}



/*
 * This creates a new node of type $type with data in $data
 *
 * @param $data - subset of XML data, hopefully beginning at a value of type $type.
 * @param $type - type of entity to create
 *
 * @return node_id
 */
function buildCourseInfoEntities($data, $type) {
    global $user;


    $title_key = "";
    switch($type) {
        case 'department':
            $title_key = 'code';
            break;
        case 'subject':
            $title_key = 'code';
            //code
            break;
        case 'course':
            $title_key = 'number';
            //code
            break;
        case 'section':
            $title_key = 'crn';
            //code
            break;
        case 'instructor':
            $title_key = 'title';
            //code
            break;
    }


    $query = new EntityFieldQuery();
    // Query employee table for $instructor['email']
    $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', $type)
        ->propertyCondition('title', $data['@attributes'][$title_key]);

    $result = $query->execute();

    if(!empty($result['node'])){
        dpm(current($result['node'])->nid);
        $entity = node_load(current($result['node'])->nid);
        $wrapper = entity_metadata_wrapper('node', $entity);
    }
    else {
        list ($entity, $wrapper) = createEntity($type);
    }


    switch ($type) {
        case 'department':
            $attributes = $data['@attributes'];
            // Need to test for subject plurality here
            if (testNewEntityPlurality($data['subject'])){
                // Hacky, but makes the foreach work no matter what.
                $subjects = $data['subject'];
            }
            else {
                $subjects[0] = $data['subject'];
            }


            // Set all values
            if (isset($attributes["code"]) && !empty($attributes["code"])) {
                $wrapper->title->set($attributes["code"]);
            }
            if (isset($attributes["name"]) && !empty($attributes["name"])) {
                $wrapper->field_name->set($attributes["name"]);
            }
            // Now we have to set an entity reference for every associated subject.
            foreach ($subjects as $subject) {
                $subject_nid = buildCourseInfoEntities($subject, 'subject');
                $entity->field_subject[$entity->language][]['target_id'] = $subject_nid;
            }
            // The End - Save It
            $wrapper->save();
            break;

        case 'subject':
            $attributes = $data['@attributes'];
            if (testNewEntityPlurality($data['course'])){
                $courses = $data['course'];
            }
            else {
                $courses[0] = $data['course'];
            }


            // Set all values
            if(isset($attributes["code"]) && !empty($attributes["code"])) {
                $wrapper->title->set($attributes["code"]);
            }
            if (isset($attributes["name"]) && !empty($attributes["name"])) {
                $wrapper->field_name->set($attributes["name"]);
            }

            foreach ($courses as $course){
                $course_nid = buildCourseInfoEntities($course, 'course');
                $entity->field_course[$entity->language][]['target_id'] = $course_nid;
            }

            $wrapper->save();
            break;

        case 'course':
            $attributes = $data['@attributes'];
            if(testNewEntityPlurality($data['section'])){
                $sections = $data['section'];
            }
            else {
                $sections[0] = $data['section'];
            }


            // Set all values
            if(isset($attributes["number"]) && !empty($attributes["number"])) {
                $wrapper->title->set($attributes["number"]);
            }
            if(isset($attributes["title"]) && !empty($attributes["title"])) {
                $wrapper->field_title->set($attributes["title"]);
            }
            if(isset($data["catalog-description"]) && !empty($data["catalog-description"])) {
                $wrapper->body->value->set($data["catalog-description"]);
            }

            foreach ($sections as $section) {
                $section_nid = buildCourseInfoEntities($section, 'section');
                $entity->field_section[$entity->language][]['target_id'] = $section_nid;
            }

            $wrapper->save();
            break;

        case 'section':
            $attributes = $data['@attributes'];

            // Set all values

            // title
            if(isset($attributes["crn"]) && !empty($attributes["crn"])) {
                $wrapper->title->set($attributes["crn"]);
            }

            // field_number
            if(isset($attributes["number"]) && !empty($attributes["number"])) {
                $wrapper->field_number->set($attributes["number"]);
            }

            // field_part_of_term
            if(isset($attributes["part-of-term"]) && !empty($attributes["part-of-term"])) {
                $wrapper->field_part_of_term->set($attributes["part-of-term"]);
            }

            //field_status
            if(isset($attributes["status"]) && !empty($attributes["status"])) {
                $wrapper->field_status->set($attributes["status"]);
            }

            // body
            if(isset($data["text"]) && !empty($data["text"])) {
                $wrapper->body->value->set($data["text"]);
            }

            // field_section_title
            if(isset($data["section-title"]) && !empty($data["section-title"])) {
                $wrapper->field_section_title->set($data["section-title"]);
            }

            /* This is bad, the assumption is that there can be multiple meeting-time
             * fields for each section somehow.  Right now I am only taking the first.
             * This needs to be fixed.
             * TODO: make meeting-times a multiple value field in sections.
             *
             * Also, this is named very poorly.  It couldnt change from its original name
             * to start-date, hence date_range for the field name.
             */
            if(isset($data['meeting-times']['meeting-time']) && !empty($data["meeting-times"]['meeting-time'])) {
                if(isset($data["meeting-times"]['meeting-time']['start-date']) && !empty($data["meeting-times"]['meeting-time']['start-date'])) {
                    $wrapper->field_date_range->set($data["meeting-times"]['meeting-time']['start-date']);
                }
                if(isset($data["meeting-times"]['meeting-time']['end-date']) && !empty($data["meeting-times"]['meeting-time']['end-date'])) {
                    $wrapper->field_end_date->set($data["meeting-times"]['meeting-time']['end-date']);
                }

                //field_meeting_days
                /*
                 * This field also exists in the XML data as multiple entries.
                 * I can, for now, just concatenate them together to keep each day as one field 'days.'
                 */
                //TODO: Assumption: no examples of days as plural.
                if(isset($data["meeting-times"]['meeting-time']['days']) && !empty($data["meeting-times"]['meeting-time']['days'])){
                    $days = array();
                    if (!empty($data['meeting-times']['meeting-time']['days']['day'])) {
                        if (testNewEntityPlurality($data['meeting-times']['meeting-time']['days']['day'])) {
                            $days = $data['meeting-times']['meeting-time']['days']['day'];
                        } else {
                            $days[0] = $data['meeting-times']['meeting-time']['days']['day'];
                        }
                    }
                    $day_str = '';
                    foreach ($days as $d){
                        $day_str .= $d;
                    }
                    $wrapper->field_meeting_days->set($day_str);
                }

                //field_meeting_time  - corresponds to start-time.
                if(isset($data["meeting-times"]['meeting-time']['start-time']) && !empty($data["meeting-times"]['meeting-time']['start-time'])) {
                    $wrapper->field_meeting_time->set($data["meeting-times"]['meeting-time']['start-date']);
                }

                //field_end_time
                if(isset($data["meeting-times"]['meeting-time']['end-time']) && !empty($data["meeting-times"]['meeting-time']['end-time'])) {
                    $wrapper->field_end_time->set($data["meeting-times"]['meeting-time']['end-date']);
                }

                //TODO: remove building code from content type - it has been replaced by building name.
                //field_building_name
                if(isset($data["meeting-times"]['meeting-time']['bldg']) && !empty($data["meeting-times"]['meeting-time']['bldg'])) {
                    if (isset($data["meeting-times"]['meeting-time']['bldg']['@attributes']) && !empty($data["meeting-times"]['meeting-time']['bldg']['@attributes'])) {
                        //$wrapper->field_building_code->set($data["meeting-times"]['meeting-time']['bldg']['@attributes']['code']);
                        //TODO: figure out why $data["meeting-times"]['meeting-time']['bldg']['@attributes']['code'] tries to be an array index
                    }
                    else {
                        $wrapper->field_building_name->set($data["meeting-times"]['meeting-time']['bldg']);
                    }

                }

                //field_room_number
                if(isset($data["meeting-times"]['meeting-time']['room']) && !empty($data["meeting-times"]['meeting-time']['room'])) {
                    $wrapper->field_room_number->set($data["meeting-times"]['meeting-time']['room']);
                }
            }

            //field_instructional_method
            if(isset($data["instructional-method"]) && !empty($data["instructional-method"])) {


                if (isset($data["instructional-method"]['@attributes']) && !empty($data["instructional-method"]['@attributes'])) {
                    //$wrapper->field_instructional_method->set($data["instructional-method"]['@attributes']['code']);
                }
                else {
                    $wrapper->field_instructional_method->set($data["instructional-method"]);
                }

            }

            //field_delivery_type
            if(isset($data["delivery-type"]) && !empty($data["delivery-type"])) {
                $wrapper->field_delivery_type->set($data["delivery-type"]);
            }

            //field_credits
            if(isset($data["credits"]) && !empty($data["credits"])) {
                $wrapper->field_credits->set($data["credits"]);
            }

            //field_fees
            if(isset($data["fees"]) && !empty($data["fees"])) {
                $wrapper->field_fees->set($data["fees"]);
            }


            //field_waitlist
            if(isset($data["waitlist"]) && !empty($data["waitlist"])) {
                $wrapper->field_waitlist->set($data["waitlist"]);
            }

            //field_waitlist_max
            //TODO: waitlist max is unavailable in the data array for some reason.

            //field_enrollment
            if(isset($data["enrollment"]) && !empty($data["enrollment"])) {
                $wrapper->field_enrollment->set($data["enrollment"]);
            }

            //field_enrollment_max
            //TODO: enrollment max is unavailable in the data array for some reason.


            if(!empty($data['instructors']['instructor'])) {
                if (testNewEntityPlurality($data['instructors']['instructor'])) {
                    $instructors = $data['instructors']['instructor'];
                } else {
                    $instructors[0] = $data['instructors']['instructor'];
                }
                //field_instructor (entity ref)
                foreach ($instructors as $instructor) {
                    // Look up Employee table
                    $query = new EntityFieldQuery();
                    // Query employee table for $instructor['email']
                    $query->entityCondition('entity_type', 'node')
                        ->entityCondition('bundle', 'employee')
                        ->fieldCondition('field_email', 'value', $instructor['email'], '=');

                    $result = $query->execute();

                    // If employee with matching email exists in 'Employee' table...
                    if (!empty($result['node'])) {
                        $nids = array_keys($result['node']);

                        // There shouldn't be multiples, but just in case.
                        if (sizeof($nids) > 1) {
                            // We can only grab the first entry, then display an error
                            drupal_set_message(t('There seem to be two Employee nodes with the email address @email.  Selecting only the first.', array('@email' => $$instructor['name'])));
                        }

                        $nid = $nids[0];
                        //$node = node_load($nid);
                        $entity->field_instructor[$entity->language][]['target_id'] = $nid;

                    } else {
                        // TODO: create instructor in Employee Table if they dont exist.
                        //Do Stuff
                    }


                    // If it exists in employee table
                    // get nid of employee
                    // $entity->field_instructor[$entity->language][]['target_id'] = $employee_nid
                    // Else - if it doesnt exist
                    // Create new Employee
                    // $entity->field_instructor[$entity->language][]['target_id'] = $employee_nid

                }
            }






            $wrapper->save();
            break;

        case 'instructor':
            //code
            break;
    }
    return $wrapper->nid->raw();

}


function createEntity($type) {
    global $user;
    $values = array(
        'type' => $type,
        'uid' => $user->uid,
        'status' => 1,
        'comment' => 0,
        'promote' => 0,
    );
    $entity = entity_create('node', $values);
    $wrapper = entity_metadata_wrapper('node', $entity);

    return array($entity, $wrapper);
}