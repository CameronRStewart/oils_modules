<?php

include('functions.php');

/**
 * @file
 * A module that displays employee information.
 */
/**
 * Implements hook_block_info().
 */

function staffdb_block_info() {

  $blocks['staffdb'] = array(
    // The name that will appear in the block list.
    'info' => t('Employee List'),
    // Default setting.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}

/**
 *  Get employee information
 *
 * @return
 *  A result set of employee information
 */

function get_staff_info() {

  // Set db connection
  $dbcon = variable_get('staffdb_connection_name');
  if (isset($dbcon) && $dbcon != "") {
    db_set_active($dbcon);
  }
  else {
    db_set_active('remote');
  }

  // Execute query
  $result = db_query('select e.id, e.first_name, e.middle_name, e.last_name, e.visible, e.email, e.rg_profile, e.picture, e.blurb, e.codhead, e.current_teach, e.ul_employee, e.oils_employee, e.cv_link, d.dept_id, d.dept, ed.emp2dept_id, b.box_id, b.room, b.telephone, eb.emp2box_id, l.loc_id, l.loc, r.rank, s.sub_id, s.sub, es.emp2subjects_id, w.websites_id, w.website, ew.emp2websites_id, res.research_id, res.research, eres.emp2research_id, t.title, ec.emp2classes_id, c.classes_id, c.classes
 from {employee} e
 left join ({dept} d, {emp2dept} ed)
 on (e.id = ed.emp_id and ed.dept_id = d.dept_id)
 left join ({box} b, {emp2box} eb, loc l)
 on (e.id = eb.emp_id and eb.box_id = b.box_id
 and b.loc_id = l.loc_id)
 left join ({title} t, {emp2title} et)
 on (e.id = et.emp_id and et.title_id = t.title_id)
 left join ({subs} s, {emp2subjects} es)
 on (e.id = es.emp_id and es.subjects_id = s.sub_id)
 left join ({rank} r, {emp2rank} er)
 on (e.id = er.emp_id and er.rank_id = r.rank_id)
 left join ({websites} w, {emp2websites} ew) on (e.id = ew.emp_id and ew.websites_id = w.websites_id)
 left join ({research} res, {emp2research} eres) on (e.id = eres.emp_id and eres.research_id = res.research_id)
 left join ({classes} c, {emp2classes} ec) on (e.id = ec.emp_id and ec.classes_id = c.classes_id)
 where e.visible = 1 and e.oils_employee = 1 order by last_name, first_name, middle_name');

  // Revert to default db connection
  db_set_active();

  return $result;
}

function staffdb_block_view($delta = '') {
  $block['staffdb'] = t('Employee Listing');
  if (user_access('access content')) {
    $result = get_staff_info();
    $massaged_result = massage_employee_data($result);
    $squished_result = makeDirectory($massaged_result);
    $items[] = array();

    foreach ($squished_result as $record) {
      $items[] = array(
        'data' => array(
          $record['name'],
          $record['title'],
          $record['dept'],
          $record['room'],
          $record['research'],
          $record['classes']
        ),
      );
    }
//        $ret_array[] = array("name" => "$name_code", "title" => "$title_code$rank_code", "dept" => "$dept_code", "room" => "$room_code", "id" => "$cur_id", "research" => "$research_code", "classes" => "$classes_code");

  }


  // No results.
  if (empty($items)) {
    $block['content'] = t('No employee information available.');
  }
  else {
    $variables[] = array();

    $variables['header'] = array(
      //    array('data' => t('Name'), 'field' => 'name', 'sort' => 'asc'),
      //    array('data' => t('Title/Rank'), 'field' => 'title'),
      array('data' => t('Name')),
      array('data' => t('Title/Rank')),
      array('data' => t('Department')),
      array('data' => t('Location')),
      array('data' => t('Research Interests')),
      array('data' => t('Classes')),

    );

    // Pass data through theme function.
    $variables['rows'] = $items;
    $variables['attributes'] = array();
    $variables['caption'] = '';
    $variables['colgroups'] = array();
    $variables['sticky'] = TRUE;
    $variables['empty'] = t("No data returned.");
    $block['content'] = theme_table($variables);
  }

  return $block;
}


/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 * @return string
 *   Content for the help page
 */
function staffdb_help($path, $arg) {
  switch ($path) {
    case "admin/help#staffdb":
      return '<p>' . t("This module allows display and editing of employee information contained in an external database.") . '</p>';
      break;
  }
}

/**
 * Implements hook_menu().
 */
function staffdb_menu() {
  $items = array();

  $items['admin/config/content/staffdb-settings'] = array(
    'title' => 'Employee Database Module Configuration',
    'description' => 'Configuration for UL Database Interaction Module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('staffdb_connection_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/content/staffdb-import'] = array(
    'title' => 'Employee Database Module: Import and Update Records',
    'description' => 'Allows employee information to be imported or updated.',
    'page callback' => 'import_update_employees',
    'page arguments' => array(4),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Page callback: staffdb settings
 *
 * @see staffdb_menu()
 */
function staffdb_connection_form($form, &$form_state) {
  $form['staffdb_connection_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Connection name to use for employee database access'),
    '#default_value' => variable_get('staffdb_connection_name'),
    '#size' => 12,
    '#maxlength' => 50,
    '#description' => t('The connection name from Drupal\'s settings.php file to use for employee database access.'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Page callback: staffdb import/update
 *
 * @see staffdb_menu()
 */
function staffdb_import_form($form, &$form_state) {
  $form['submit'][] = array(
    '#type' => 'submit',
    '#value' => t('Begin Import/Update'),
    '#submit' => array('import_update_employees'),
    '#prefix' => '<p>Click button to begin import/update of employee information.</p>',
  );
  $form['start_staff_import_process'] = array(
    '#type' => 'hidden',
    '#value' => '1'
  );

  return system_settings_form($form);
}

function import_update_employees($args = NULL) {
  if (isset($args) && $args == "begin") {
    $argtext = $args;
    $results_text = start_import_update_employees();
    return array(
      '#markup' => t('<p>@results_text</p>', array(
        '@args' => $args,
        '@results_text' => $results_text
      )),
    );
  }
  return array(
    '#markup' => t('<p>args: @args</p><p>Click the button below to begin import/update of employee information.</p><p><a href="/admin/config/content/staffdb-import/begin">Begin</a></p>', array('@args' => $args)),
  );
}

function start_import_update_employees() {
  $result = get_staff_info();
  $massaged_result = massage_employee_data($result);
  $results_text = make_update_employee_content_type($massaged_result);


  return $results_text;
}

function make_update_employee_content_type($input) {
  if (isset($input) && is_array($input) && !empty($input)) {
    foreach ($input as $emp_id => $emp) {
      $return = array();
      if (isset($emp_id) && is_numeric($emp_id)) {
        $return['field_remote_id'] = $emp_id;
      }
      if (isset($emp['title']) && $emp['title'] != "") {
        $return['field_job_title'] = $emp['title'];
      }
      if (isset($emp['first_name']) && $emp['first_name'] != "") {
        $return['field_first_name'] = $emp['first_name'];
      }
      if (isset($emp['middle_name']) && $emp['middle_name'] != "") {
        $return['field_middle_name'] = $emp['middle_name'];
      }
      if (isset($emp['last_name']) && $emp['last_name'] != "") {
        $return['field_last_name'] = $emp['last_name'];
      }
      if (isset($emp['email']) && $emp['email'] != "") {
        $return['field_email'] = $emp['email'];
      }
      if (isset($emp['blurb']) && $emp['blurb'] != "") {
        $return['body'] = $emp['blurb'];
      }
      if (isset($emp['visible']) && $emp['visible'] != "") {
        $return['field_visible'] = $emp['visible'];
      }
      if (isset($emp['rg_profile']) && $emp['rg_profile'] != "") {
        $return['field_research_guide_profile'] = $emp['rg_profile'];
      }
      if (isset($emp['picture']) && $emp['picture'] != "") {
        $return['field_picture'] = $emp['picture'];
      }
      if (isset($emp['rank']) && $emp['rank'] != "") {
        $return['field_faculty_rank'] = $emp['rank'];
      }
      if (isset($emp['website']) && $emp['website'] != "") {
        $return['field_web_sites'] = $emp['website'];
      }
      if (isset($emp['codhead']) && $emp['codhead'] != "") {
        $return['field_dean_s_cabinet_member'] = $emp['codhead'];
      }
      if (isset($emp['current_teach']) && $emp['current_teach'] != "") {
        $return['field_currently_teaching'] = $emp['current_teach'];
      }
      if (isset($emp['ul_employee']) && $emp['ul_employee'] != "") {
        $return['field_ul_employee'] = $emp['ul_employee'];
      }
      if (isset($emp['oils_employee']) && $emp['oils_employee'] != "") {
        $return['field_oils_employee'] = $emp['oils_employee'];
      }
      if (isset($emp['cv_link']) && $emp['cv_link'] != "") {
        $return['field_cv_link'] = $emp['cv_link'];
      }
      if (isset($emp['dept']) && $emp['dept'] != "") {
        $return['dept'] = $emp['dept'];
      }
      if (isset($emp['box_id']) && !empty($emp['box_id'])) {
        $return['box_id'] = $emp['box_id'];
      }
      if (isset($emp['subjects']) && !empty($emp['subjects'])) {
        $return['subjects'] = $emp['subjects'];
      }
      if (isset($emp['classes']) && !empty($emp['classes'])) {
        $return['classes'] = $emp['classes'];
      }
      if (isset($emp['research']) && !empty($emp['research'])) {
        $return['research'] = $emp['research'];
      }

      // Check location(s) to see if they need to be created or updated, return array of vids
      if (isset($return['box_id']) && !empty($return['box_id'])) {
        $location_vids = check_locations($return['box_id'], $return['field_remote_id']);
      }

      // Use employee info, create/update/delete as necessary
      $outcome = check_employee($return, $location_vids);
    }
  }
  else {
    // If employee array is empty, inform.
  }

  return $outcome;
}

function check_employee($input, $location_vids) {
  global $user;
  // Pull all employee nids into array to check against
  $nid_list_q = db_query('select nid, title from {node} n where n.type = \'employee\'');
  foreach ($nid_list_q as $nline) {
    $nid_list["$nline->title"] = $nline->nid;
  }

  // Check to see if node exists; if so, get it, otherwise create it
  $node_title = "";
  if (isset($input["field_first_name"])) {
    $node_title .= $input["field_first_name"];
  }
  if (isset($input["field_middle_name"])) {
    $node_title .= " " . $input["field_middle_name"];
  }
  if (isset($input["field_last_name"])) {
    $node_title .= " " . $input["field_last_name"];
  }
  if (isset($nid_list[$node_title]) && is_numeric($nid_list[$node_title])) {
    $wrapper = entity_metadata_wrapper('node', $nid_list[$node_title]);
  } else {
    $values = array(
      'type' => 'employee',
      'uid' => $user->uid,
      'status' => 1,
      'comment' => 0,
      'promote' => 0,
    );
    $entity = entity_create('node', $values);
    $wrapper = entity_metadata_wrapper('node', $entity);
  }
  // Set all values
  if (isset($input["field_remote_id"]) && !empty($input["field_remote_id"])) {
    $wrapper->field_remote_id->set($input["field_remote_id"]);
  } else {
    $wrapper->field_remote_id->set(NULL);
  }
  $title_text = "";
  if (isset($input["field_first_name"]) && !empty($input["field_first_name"])) {
    $wrapper->field_first_name->set($input["field_first_name"]);
    $title_text .= $input["field_first_name"];
  } else {
    $wrapper->field_first_name->set(NULL);
  }
  if (isset($input["field_middle_name"]) && !empty($input["field_middle_name"])) {
    $wrapper->field_middle_name->set($input["field_middle_name"]);
    $title_text .= " " . $input["field_middle_name"];
  } else {
    $wrapper->field_middle_name->set(NULL);
  }
  if (isset($input["field_last_name"]) && !empty($input["field_last_name"])) {
    $wrapper->field_last_name->set($input["field_last_name"]);
    $title_text .= " " . $input["field_last_name"];
  } else {
    $wrapper->field_last_name->set(NULL);
  }
  if (isset($title_text) && !empty($title_text)) {
    $wrapper->title->set($title_text);
  } else {
    $wrapper->title->set("No Name Provided");
  }
  if (isset($input["field_email"]) && !empty($input["field_email"])) {
    $wrapper->field_email->set($input["field_email"]);
  } else {
    $wrapper->field_email->set(NULL);
  }
  if (isset($input["field_visible"]) && !empty($input["field_visible"])) {
    $wrapper->field_visible->set($input["field_visible"]);
  } else {
    $wrapper->field_visible->set(NULL);
  }
  if (isset($input["field_research_guide_profile"]) && !empty($input["field_research_guide_profile"])) {
    $wrapper->field_research_guide_profile->set($input["field_research_guide_profile"]);
  } else {
    $wrapper->field_research_guide_profile->set(NULL);
  }
  if (isset($input["field_picture"]) && !empty($input["field_picture"])) {
    $wrapper->field_picture->set($input["field_picture"]);
  } else {
    $wrapper->field_picture->set(NULL);
  }
  if (isset($input["field_dean_s_cabinet_member"]) && !empty($input["field_dean_s_cabinet_member"])) {
    $wrapper->field_dean_s_cabinet_member->set($input["field_dean_s_cabinet_member"]);
  } else {
    $wrapper->field_dean_s_cabinet_member->set(NULL);
  }
  if (isset($input["field_currently_teaching"]) && !empty($input["field_currently_teaching"])) {
    $wrapper->field_currently_teaching->set($input["field_currently_teaching"]);
  } else {
    $wrapper->field_currently_teaching->set(NULL);
  }
  if (isset($input["field_ul_employee"]) && !empty($input["field_ul_employee"])) {
    $wrapper->field_ul_employee->set($input["field_ul_employee"]);
  } else {
    $wrapper->field_ul_employee->set(NULL);
  }
  if (isset($input["field_oils_employee"]) && !empty($input["field_oils_employee"])) {
    $wrapper->field_oils_employee->set($input["field_oils_employee"]);
  } else {
    $wrapper->field_oils_employee->set(NULL);
  }
  if (isset($input["field_cv_link"]) && !empty($input["field_cv_link"])) {
    $wrapper->field_cv_link->set($input["field_cv_link"]);
  } else {
    $wrapper->field_cv_link->set(NULL);
  }
  if (isset($input["body"]) && !empty($input["body"])) {
    $wrapper->body->value->set($input["body"]);
  } else {
    $wrapper->body->value->set(NULL);
  }

  // TAXONOMY TERM REFERENCES ==>> NEEDS CHECK TO DETERMINE TID(S)
  if (isset($input["field_job_title"]) && !empty($input["field_job_title"])) {
    // Get vid to check against
    $jt_vid_q = db_query('select vid, name from {taxonomy_vocabulary} t where t.name = \'Job Title\'');
    foreach ($jt_vid_q as $jt_vline) {
      $jt_vid = $jt_vline->vid;
    }

    // Create an array to test values against
    $jt_result = taxonomy_get_tree($jt_vid, $parent = 0, $max_depth = NULL, $load_entities = FALSE);
    foreach ($jt_result as $jt_line) {
      $jt_array["$jt_line->name"] = $jt_line->tid;
    }

    // Check against current values
    if (!isset($jt_array[$input["field_job_title"]]) || !is_numeric($jt_array[$input["field_job_title"]])) {
      $jt_tid = insert_tax_tid($jt_vid, $input["field_job_title"], 'taxonomy_term');
    } else {
      $jt_tid = NULL;
    }
  } else {
    $jt_tid = NULL;
  }
  $wrapper->field_job_title->set($jt_tid);

  if (isset($input["field_faculty_rank"]) && !empty($input["field_faculty_rank"])) {
    // Get vid to check against
    $fr_vid_q = db_query('select vid, name from {taxonomy_vocabulary} t where t.name = \'Rank\'');
    foreach ($fr_vid_q as $fr_vline) {
      $fr_vid = $fr_vline->vid;
    }

    // Create an array to test values against
    $fr_result = taxonomy_get_tree($fr_vid, $parent = 0, $max_depth = NULL, $load_entities = FALSE);
    foreach ($fr_result as $fr_line) {
      $fr_array["$fr_line->name"] = $fr_line->tid;
    }

    // Check against current values
    if (!isset($fr_array[$input["field_faculty_rank"]]) || !is_numeric($fr_array[$input["field_faculty_rank"]])) {
      $fr_tid = insert_tax_tid($fr_vid, $input["field_faculty_rank"], 'taxonomy_term');
    } else {
      $fr_tid = NULL;
    }
  } else {
    $fr_tid = NULL;
  }
  $wrapper->field_faculty_rank->set($fr_tid);

  // Multi-value fields need handled a little differently
  if (isset($input["dept"]) && !empty($input["dept"])) {
    // Get vid to check against
    $d_vid_q = db_query('select vid, name from {taxonomy_vocabulary} t where t.name = \'Department\'');
    foreach ($d_vid_q as $d_vline) {
      $d_vid = $d_vline->vid;
    }

    // Check against current values
    $d_tid = array();
    $refresh = 1;
    foreach ($input["dept"] as $key => $d_val) {
      if ($refresh == 1) {
        $d_array = get_tids($d_vid);
        $refresh = 0;
      }
      if (!isset($d_array[$d_val]) || !is_numeric($d_array[$d_val])) {
        $d_tid[] = insert_tax_tid($d_vid, $d_val, 'taxonomy_term');
        $refresh = 1;
      } else {
        $d_tid[] = $d_array[$d_val];
      }
    }
  } else {
    $d_tid[] = NULL;
  }
  $d_tid = array_unique($d_tid);
  $wrapper->field_department->set($d_tid);

  if (isset($input["subjects"]) && !empty($input["subjects"])) {
    // Get vid to check against
    $s_vid_q = db_query('select vid, name from {taxonomy_vocabulary} t where t.name = \'Subjects\'');
    foreach ($s_vid_q as $s_vline) {
      $s_vid = $s_vline->vid;
    }

    // Check against current values
    $s_tid = array();
    $refresh = 1;
    foreach ($input["subjects"] as $key => $sub_val) {
      if ($refresh == 1) {
        $s_array = get_tids($s_vid);
        $refresh = 0;
      }
      if (!isset($s_array[$sub_val]) || !is_numeric($s_array[$sub_val])) {
        $s_tid[] = insert_tax_tid($s_vid, $sub_val, 'taxonomy_term');
        $refresh = 1;
      } else {
        $s_tid[] = $s_array[$sub_val];
      }
    }
  } else {
    $s_tid[] = NULL;
  }
  $s_tid = array_unique($s_tid);
  $wrapper->field_subjects->set($s_tid);

  if (isset($input["classes"]) && !empty($input["classes"])) {
    // Get vid to check against
    $c_vid_q = db_query('select vid, name from {taxonomy_vocabulary} t where t.name = \'Classes\'');
    foreach ($c_vid_q as $c_vline) {
      $c_vid = $c_vline->vid;
    }

    // Create an array to test values against
    $c_result = taxonomy_get_tree($c_vid, $parent = 0, $max_depth = NULL, $load_entities = FALSE);
    foreach ($c_result as $c_line) {
      $c_array["$c_line->name"] = $c_line->tid;
    }

    // Check against current values
    $c_tid = array();
    $refresh = 1;
    foreach ($input["classes"] as $key => $classes_val) {
      if ($refresh == 1) {
        $c_array = get_tids($c_vid);
        $refresh = 0;
      }
      if (!isset($c_array[$classes_val]) || !is_numeric($c_array[$classes_val])) {
        $c_tid[] = insert_tax_tid($c_vid, $classes_val, 'taxonomy_term');
        $refresh = 1;
      } else {
        $c_tid[] = $c_array[$classes_val];
      }
    }
  } else {
    $c_tid[] = NULL;
  }
  $c_tid = array_unique($c_tid);
  $wrapper->field_classes->set($c_tid);

  if (isset($input["research"]) && !empty($input["research"])) {
    // Get vid to check against
    $r_vid_q = db_query('select vid, name from {taxonomy_vocabulary} t where t.name = \'Research Interests\'');
    foreach ($r_vid_q as $r_vline) {
      $r_vid = $r_vline->vid;
    }

    // Check against current values
    $r_tid = array();
    $refresh = 1;
    foreach ($input["research"] as $key => $research_val) {
      if ($refresh == 1) {
        $r_array = get_tids($r_vid);
        $refresh = 0;
      }
      if (!isset($r_array[$research_val]) || !is_numeric($r_array[$research_val])) {
        $r_tid[] = insert_tax_tid($r_vid, $research_val, 'taxonomy_term');
        $refresh = 1;
      } else {
        $r_tid[] = $r_array[$research_val];
      }
    }
  } else {
    $r_tid[] = NULL;
  }
  $r_tid = array_unique($r_tid);
  $wrapper->field_research_interests->set($r_tid);

  if (isset($input["field_web_sites"]) && !empty($input["field_web_sites"])) {
    // Get vid to check against
    $w_vid_q = db_query('select vid, name from {taxonomy_vocabulary} t where t.name = \'Web Sites\'');
    foreach ($w_vid_q as $w_vline) {
      $w_vid = $w_vline->vid;
    }

    // Check against current values
    $w_tid = array();
    $refresh = 1;
    foreach ($input["field_web_sites"] as $key => $website_val) {
      if ($refresh == 1) {
        $w_array = get_tids($w_vid);
        $refresh = 0;
      }
      if (!isset($w_array[$website_val]) || !is_numeric($w_array[$website_val])) {
        $w_tid[] = insert_tax_tid($w_vid, $website_val, 'taxonomy_term');
        $refresh = 1;
      } else {
        $w_tid[] = $w_array[$website_val];
      }
    }
  } else {
    $w_tid[] = NULL;
  }
  $w_tid = array_unique($w_tid);
  $wrapper->field_web_sites->set($w_tid);

  if (isset($location_vids) && is_array($location_vids)) {
    $wrapper->field_physical_location->set($location_vids);
  }

  // Save edits or new node
  $wrapper->save();
}

function get_tids($vid) {
  // Set up variable
  $array = array();
  // Create an array to test values against
  $result = taxonomy_get_tree($vid, $parent = 0, $max_depth = NULL, $load_entities = FALSE);
  foreach ($result as $line) {
    $array["$line->name"] = $line->tid;
  }
  return $array;
}

function check_locations($input, $remote_id) {
  global $user;
  // Pull all building locations into structure to check against
  $vid_q = db_query('select vid, name from {taxonomy_vocabulary} t where t.name = \'Location\'');
  foreach ($vid_q as $vline) {
    $vid = $vline->vid;
  }

  // Create an array to test location values against
  $loc_result = taxonomy_get_tree($vid, $parent = 0, $max_depth = NULL, $load_entities = FALSE);
  foreach ($loc_result as $locline) {
    $loc_array["$locline->name"] = $locline->tid;
  }

  // Get list of current employee_location node IDs, titles
  $elnodes = db_query('select nid, title from {node} n where n.type = \'employee_location\'');
  $emp_loc_nodes = array();
  foreach ($elnodes as $rec) {
    $emp_loc_nodes[$rec->title] = $rec->nid;
  }

  $location_vids = array();
  foreach ($input as $box_id => $box_info) {
    //  Does the branch/location exist?
    if (isset($box_info['loc']) && !empty($box_info['loc'])) {
      if (!isset($loc_array[$box_info['loc']])) {
        $tid = insert_tax_tid($vid, $box_info['loc'], 'taxonomy_term');
      } else {
        $tid = $loc_array[$box_info['loc']];
      }
    }

    // Does the location group exist?
    if (isset($remote_id) && is_numeric($remote_id)) {
      if (isset($emp_loc_nodes[$remote_id])) {
        $loc_vid = $emp_loc_nodes[$remote_id];
      } else {
        $loc_vid = NULL;
      }
      $location_vids[] = insert_update_location_node($box_info, $remote_id, $tid, $loc_vid);
    }
  }
  return $location_vids;
}

// Creates employee_location instance, returns vid of node
// With $vid, checks to see if node needs updated
function insert_update_location_node($box_info, $remote_id, $tid, $vid = NULL) {
  global $user;

  if (isset($vid) && !empty($vid)) { // TODO: test if values have changed, only update if yes
    // UPDATE instead of create
    $existing_location = entity_metadata_wrapper('node', $vid);
    if (isset($box_info['room']) && !empty($box_info['room'])) {
      $existing_location->field_room_number->set($box_info['room']);
    } else {
      $existing_location->field_room_number->set(NULL);
    }
    if (isset($box_info['telephone']) && !empty($box_info['telephone'])) {
      $existing_location->field_phone_number->set($box_info['telephone']);
    } else {
      $existing_location->field_phone_number->set(NULL);
    }
    if (isset($tid) && !empty($tid)) {
      $existing_location->field_location->set($tid);
    } else {
      $existing_location->field_location->set(NULL);
    }
    $existing_location->save();
    $location_id = $existing_location->vid->value();
  }
  else {
    $values = array(
      'type' => 'employee_location',
      'uid' => $user->uid,
      'status' => 1,
      'comment' => 0,
      'promote' => 0,
    );
    $entity = entity_create('node', $values);
    $wrapper = entity_metadata_wrapper('node', $entity);
    if (isset($box_info['room']) && !empty($box_info['room'])) {
      $wrapper->field_room_number->set($box_info['room']);
    }
    if (isset($box_info['telephone']) && !empty($box_info['telephone'])) {
      $wrapper->field_phone_number->set($box_info['telephone']);
    }
    if (isset($tid) && !empty($tid)) {
      $wrapper->field_location->set($tid);
    } else {
      $wrapper->field_location->set(NULL);
    }
    $wrapper->title->set($remote_id);
    $wrapper->save();
    $location_id = $wrapper->vid->value();
  }
  return $location_id;
}

function insert_tax_tid($vid, $term, $term_type) {
  global $user;
  // CREATE new
  $values = array(
    'name' => $term,
    'vid' => $vid,
  );
  $entity = entity_create($term_type, $values);
  $wrapper = entity_metadata_wrapper($term_type, $entity);
  $wrapper->save();

  return $wrapper->tid->value();
}


